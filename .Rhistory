plot.title = element_text(color = "white", face = "bold"),
plot.subtitle = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
# A) Merkeandel per land
ggplot(df_brand_country, aes(x = pct, y = reorder_within(brand, pct, country_full), fill = brand)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ country_full, scales = "free_y") +
scale_x_continuous(labels = percent_format()) +
scale_y_reordered() +
labs(
title = "Top 10 Brands – Market Share by Country",
x = "Markedsandel",
y = NULL
) +
theme_dark_custom
ggsave("brand_share_by_country_dark.png", width = 12, height = 8, dpi = 300, bg = "black")
# B) Toppmodeller per merke
ggplot(df_model_brand, aes(x = num_ads, y = reorder_within(model, num_ads, brand), fill = brand)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ brand, scales = "free_y") +
scale_x_continuous(labels = comma) +
scale_y_reordered() +
labs(
title = "Top 5 Models for Each of the 10 Largest Brands",
x = "Antall Annonser",
y = NULL
) +
theme_dark_custom
ggsave("top_models_by_brand_dark.png", width = 14, height = 10, dpi = 300, bg = "black")
# 1. Les data
df <- read_csv("brand_model_data.csv")
# 2. Rens og formater
df <- df %>%
filter(!is.na(brand), brand != "") %>%
mutate(country_full = str_to_title(country_full))  # Penere navn
# 3. Klassifiser merke-opprinnelse
brand_origin <- tribble(
~brand,             ~origin,
# Tyske merker
"BMW",              "Tysk",
"AUDI",             "Tysk",
"MERCEDES-BENZ",    "Tysk",
"VOLKSWAGEN",       "Tysk",
"VW",               "Tysk",
"PORSCHE",          "Tysk",
"OPEL",             "Tysk",
"SMART",            "Tysk",
# Kinesiske merker
"BYD",              "Kinesisk",
"XPENG",            "Kinesisk",
"NIO",              "Kinesisk",
"GEELY",            "Kinesisk",
"ORA",              "Kinesisk",
"MG",               "Kinesisk",
"LEAPMOTOR",        "Kinesisk"
)
# 4. Slå på opprinnelse
df <- df %>%
left_join(brand_origin, by = "brand") %>%
mutate(origin = replace_na(origin, "Annet"))
# 5. Beregn andel per land og opprinnelse
df_share <- df %>%
group_by(country_full, origin) %>%
summarise(num_ads = sum(num_ads), .groups = "drop") %>%
group_by(country_full) %>%
mutate(pct = num_ads / sum(num_ads)) %>%
ungroup()
# 6. Sorter land etter andel kinesisk
country_order <- df_share %>%
filter(origin == "Kinesisk") %>%
arrange(desc(pct)) %>%
pull(country_full)
# 🔹 6b. Fokuser på tysk og kinesisk, men behold total som base
total_ads_by_country <- df %>%
group_by(country_full) %>%
summarise(total_ads = sum(num_ads), .groups = "drop")
df_focus <- df %>%
filter(origin %in% c("Tysk", "Kinesisk")) %>%
group_by(country_full, origin) %>%
summarise(num_ads = sum(num_ads), .groups = "drop") %>%
left_join(total_ads_by_country, by = "country_full") %>%
mutate(pct = num_ads / total_ads)
# 🔹 7. Visualisering
# 📊 Final version: English + reduced gridlines
ggplot(df_focus, aes(x = fct_reorder(country_full, -pct), y = pct, fill = origin)) +
geom_col(position = "dodge", width = 0.7) +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
position = position_dodge(width = 0.7),
vjust = -0.5, color = "white", size = 3.5) +
scale_y_continuous(
labels = percent_format(accuracy = 1),
breaks = seq(0, 1, 0.10),  # bare hver 10%
expand = expansion(mult = c(0, 0.1))
) +
scale_fill_manual(values = c("Tysk" = "#1f78b4", "Kinesisk" = "#e6550d"),
labels = c("Tysk" = "German", "Kinesisk" = "Chinese")) +
labs(
title = "Share of German and Chinese car brands in total market",
subtitle = "Based on share of total ad volume per country",
x = NULL,
y = "Share of total market",
fill = "Origin"
) +
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "black", color = NA),
panel.background = element_rect(fill = "black", color = NA),
legend.background = element_rect(fill = "black", color = NA),
legend.key = element_rect(fill = "black", color = NA),
text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
plot.title = element_text(color = "white", face = "bold"),
plot.subtitle = element_text(color = "white"),
panel.grid.major.y = element_line(color = "gray30"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank()  # 🔹 fjerner vertikale gridlines
)
ggsave("brand_origin_relative_share_english_dark.png", width = 10, height = 6, dpi = 300)
# 1. Les data
df <- read_csv("brand_model_data.csv")
# Sikrer at country_code = 0 → Denmark
df <- df %>%
mutate(
country_full = if_else(country_code == 0, "Denmark", country_full),
country_full = str_to_title(country_full)
)
# 2. Rens og formater
df <- df %>%
filter(!is.na(brand), brand != "") %>%
mutate(country_full = str_to_title(country_full))  # Penere navn
# 3. Klassifiser merke-opprinnelse
brand_origin <- tribble(
~brand,             ~origin,
# Tyske merker
"BMW",              "Tysk",
"AUDI",             "Tysk",
"MERCEDES-BENZ",    "Tysk",
"VOLKSWAGEN",       "Tysk",
"VW",               "Tysk",
"PORSCHE",          "Tysk",
"OPEL",             "Tysk",
"SMART",            "Tysk",
# Kinesiske merker
"BYD",              "Kinesisk",
"XPENG",            "Kinesisk",
"NIO",              "Kinesisk",
"GEELY",            "Kinesisk",
"ORA",              "Kinesisk",
"MG",               "Kinesisk",
"LEAPMOTOR",        "Kinesisk"
)
# 4. Slå på opprinnelse
df <- df %>%
left_join(brand_origin, by = "brand") %>%
mutate(origin = replace_na(origin, "Annet"))
# 5. Beregn andel per land og opprinnelse
df_share <- df %>%
group_by(country_full, origin) %>%
summarise(num_ads = sum(num_ads), .groups = "drop") %>%
group_by(country_full) %>%
mutate(pct = num_ads / sum(num_ads)) %>%
ungroup()
# 6. Sorter land etter andel kinesisk
country_order <- df_share %>%
filter(origin == "Kinesisk") %>%
arrange(desc(pct)) %>%
pull(country_full)
# 🔹 6b. Fokuser på tysk og kinesisk, men behold total som base
total_ads_by_country <- df %>%
group_by(country_full) %>%
summarise(total_ads = sum(num_ads), .groups = "drop")
df_focus <- df %>%
filter(origin %in% c("Tysk", "Kinesisk")) %>%
group_by(country_full, origin) %>%
summarise(num_ads = sum(num_ads), .groups = "drop") %>%
left_join(total_ads_by_country, by = "country_full") %>%
mutate(pct = num_ads / total_ads)
# 🔹 7. Visualisering
# 📊 Final version: English + reduced gridlines
ggplot(df_focus, aes(x = fct_reorder(country_full, -pct), y = pct, fill = origin)) +
geom_col(position = "dodge", width = 0.7) +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
position = position_dodge(width = 0.7),
vjust = -0.5, color = "white", size = 3.5) +
scale_y_continuous(
labels = percent_format(accuracy = 1),
breaks = seq(0, 1, 0.10),  # bare hver 10%
expand = expansion(mult = c(0, 0.1))
) +
scale_fill_manual(values = c("Tysk" = "#1f78b4", "Kinesisk" = "#e6550d"),
labels = c("Tysk" = "German", "Kinesisk" = "Chinese")) +
labs(
title = "Share of German and Chinese car brands in total market",
subtitle = "Based on share of total ad volume per country",
x = NULL,
y = "Share of total market",
fill = "Origin"
) +
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "black", color = NA),
panel.background = element_rect(fill = "black", color = NA),
legend.background = element_rect(fill = "black", color = NA),
legend.key = element_rect(fill = "black", color = NA),
text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
plot.title = element_text(color = "white", face = "bold"),
plot.subtitle = element_text(color = "white"),
panel.grid.major.y = element_line(color = "gray30"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank()  # 🔹 fjerner vertikale gridlines
)
ggsave("brand_origin_relative_share_english_dark.png", width = 10, height = 6, dpi = 300)
#!/usr/local/bin/Rscript
# --- Pakker ---
suppressPackageStartupMessages({
library(rmarkdown)
library(dplyr)
library(bigrquery)
})
# --- Logging ---
timestamp <- function() format(Sys.time(), "%Y-%m-%d %H:%M:%S")
log_msg <- function(msg) cat(sprintf("[%s] %s\n", timestamp(), msg))
log_msg("🚀 Starter national_share_update job...")
# --- Pandoc-sti ---
Sys.setenv(RSTUDIO_PANDOC = "/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64")
# --- BigQuery autentisering ---
tryCatch({
bq_auth(path = "~/.gcp/oystein-service-account_2.json")
log_msg("✅ Autentisering OK.")
}, error = function(e) {
log_msg(paste("❌ Feil under autentisering:", e$message))
quit(status = 1)
})
# --- BigQuery spørring ---
project <- "imposing-yen-426717-u4"
sql <- "SELECT * FROM `imposing-yen-426717-u4.wasteson_insight.daily_national_share`"
# --- Hent data ---
tryCatch({
log_msg("📡 Henter data fra BigQuery...")
query_job <- bq_project_query(project, sql)
df <- bq_table_download(query_job)
log_msg(paste("✅ Hentet", nrow(df), "rader."))
}, error = function(e) {
log_msg(paste("❌ Feil under henting av data:", e$message))
quit(status = 1)
})
# --- Lagre CSV ---
csv_path <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse/national_model_data.csv"
tryCatch({
write.csv(df, csv_path, row.names = FALSE)
log_msg(paste("✅ Lagret data til", csv_path))
}, error = function(e) {
log_msg(paste("❌ Feil under lagring av CSV:", e$message))
quit(status = 1)
})
# --- Render dashboard (hvis klart) ---
dashboard_path <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse/national_dashboard.Rmd"
output_dir <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse"
if (file.exists(dashboard_path)) {
tryCatch({
log_msg("🖼 Kjører rmarkdown::render for national dashboard...")
rmarkdown::render(
input = dashboard_path,
output_file = "index.html",
output_dir = output_dir
)
log_msg("✅ Dashboard generert OK.")
}, error = function(e) {
log_msg(paste("❌ Feil under rendering:", e$message))
})
} else {
log_msg("⚠️ Dashboardfil ikke funnet – hopper over rendering.")
}
log_msg("🎉 Jobb fullført uten feil!")
# 1. Les data
# df <- read_csv("national_model_data.csv")
df <- read_csv("national_share_data.csv")
# SQL
-- 📦 Korrekt landekoding – overskriv Albania (kode 0) med "Denmark"
# 1. Les data
df <- read_csv("national_model_data.csv")
setwd("~/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse")
# 1. Les data
df <- read_csv("national_model_data.csv")
# Sikrer at country_code = 0 → Denmark
df <- df %>%
mutate(
country_full = if_else(country_code == 0, "Denmark", country_full),
country_full = str_to_title(country_full)
)
# 2. Rens og formater
df <- df %>%
filter(!is.na(brand), brand != "") %>%
mutate(country_full = str_to_title(country_full))  # Penere navn
# 3. Klassifiser merke-opprinnelse
brand_origin <- tribble(
~brand,             ~origin,
# Tyske merker
"BMW",              "Tysk",
"AUDI",             "Tysk",
"MERCEDES-BENZ",    "Tysk",
"VOLKSWAGEN",       "Tysk",
"VW",               "Tysk",
"PORSCHE",          "Tysk",
"OPEL",             "Tysk",
"SMART",            "Tysk",
# Kinesiske merker
"BYD",              "Kinesisk",
"XPENG",            "Kinesisk",
"NIO",              "Kinesisk",
"GEELY",            "Kinesisk",
"ORA",              "Kinesisk",
"MG",               "Kinesisk",
"LEAPMOTOR",        "Kinesisk"
)
# 4. Slå på opprinnelse
df <- df %>%
left_join(brand_origin, by = "brand") %>%
mutate(origin = replace_na(origin, "Annet"))
# 5. Beregn andel per land og opprinnelse
df_share <- df %>%
group_by(country_full, origin) %>%
summarise(num_ads = sum(num_ads), .groups = "drop") %>%
group_by(country_full) %>%
mutate(pct = num_ads / sum(num_ads)) %>%
ungroup()
# 6. Sorter land etter andel kinesisk
country_order <- df_share %>%
filter(origin == "Kinesisk") %>%
arrange(desc(pct)) %>%
pull(country_full)
# 🔹 6b. Fokuser på tysk og kinesisk, men behold total som base
total_ads_by_country <- df %>%
group_by(country_full) %>%
summarise(total_ads = sum(num_ads), .groups = "drop")
df_focus <- df %>%
filter(origin %in% c("Tysk", "Kinesisk")) %>%
group_by(country_full, origin) %>%
summarise(num_ads = sum(num_ads), .groups = "drop") %>%
left_join(total_ads_by_country, by = "country_full") %>%
mutate(pct = num_ads / total_ads)
# 🔹 7. Visualisering
# 📊 Final version: English + reduced gridlines
ggplot(df_focus, aes(x = fct_reorder(country_full, -pct), y = pct, fill = origin)) +
geom_col(position = "dodge", width = 0.7) +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
position = position_dodge(width = 0.7),
vjust = -0.5, color = "white", size = 3.5) +
scale_y_continuous(
labels = percent_format(accuracy = 1),
breaks = seq(0, 1, 0.10),  # bare hver 10%
expand = expansion(mult = c(0, 0.1))
) +
scale_fill_manual(values = c("Tysk" = "#1f78b4", "Kinesisk" = "#e6550d"),
labels = c("Tysk" = "German", "Kinesisk" = "Chinese")) +
labs(
title = "Share of German and Chinese car brands in total market",
subtitle = "Based on share of total ad volume per country",
x = NULL,
y = "Share of total market",
fill = "Origin"
) +
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "black", color = NA),
panel.background = element_rect(fill = "black", color = NA),
legend.background = element_rect(fill = "black", color = NA),
legend.key = element_rect(fill = "black", color = NA),
text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
plot.title = element_text(color = "white", face = "bold"),
plot.subtitle = element_text(color = "white"),
panel.grid.major.y = element_line(color = "gray30"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank()  # 🔹 fjerner vertikale gridlines
)
ggsave("brand_origin_relative_share_english_dark.png", width = 10, height = 6, dpi = 300)
#!/usr/local/bin/Rscript
# --- Pakker ---
suppressPackageStartupMessages({
library(rmarkdown)
library(dplyr)
library(bigrquery)
})
# --- Logging ---
timestamp <- function() format(Sys.time(), "%Y-%m-%d %H:%M:%S")
log_msg <- function(msg) cat(sprintf("[%s] %s\n", timestamp(), msg))
log_msg("🚀 Starter national_share_update job...")
# --- Pandoc-sti ---
Sys.setenv(RSTUDIO_PANDOC = "/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64")
# --- BigQuery autentisering ---
tryCatch({
bq_auth(path = "~/.gcp/oystein-service-account_2.json")
log_msg("✅ Autentisering OK.")
}, error = function(e) {
log_msg(paste("❌ Feil under autentisering:", e$message))
quit(status = 1)
})
# --- BigQuery spørring ---
project <- "imposing-yen-426717-u4"
sql <- "SELECT * FROM `imposing-yen-426717-u4.wasteson_insight.daily_national_share`"
# --- Hent data ---
tryCatch({
log_msg("📡 Henter data fra BigQuery...")
query_job <- bq_project_query(project, sql)
df <- bq_table_download(query_job)
log_msg(paste("✅ Hentet", nrow(df), "rader."))
}, error = function(e) {
log_msg(paste("❌ Feil under henting av data:", e$message))
quit(status = 1)
})
# --- Lagre CSV ---
csv_path <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse/national_model_data.csv"
tryCatch({
write.csv(df, csv_path, row.names = FALSE)
log_msg(paste("✅ Lagret data til", csv_path))
}, error = function(e) {
log_msg(paste("❌ Feil under lagring av CSV:", e$message))
quit(status = 1)
})
# --- Render dashboard (hvis klart) ---
dashboard_path <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse/national_dashboard.Rmd"
output_dir <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse"
if (file.exists(dashboard_path)) {
tryCatch({
log_msg("🖼 Kjører rmarkdown::render for national dashboard...")
rmarkdown::render(
input = dashboard_path,
output_file = "index.html",
output_dir = output_dir
)
log_msg("✅ Dashboard generert OK.")
}, error = function(e) {
log_msg(paste("❌ Feil under rendering:", e$message))
})
} else {
log_msg("⚠️ Dashboardfil ikke funnet – hopper over rendering.")
}
log_msg("🎉 Jobb fullført uten feil!")
#!/usr/local/bin/Rscript
# --- Pakker ---
suppressPackageStartupMessages({
library(rmarkdown)
library(dplyr)
library(bigrquery)
})
# --- Logging ---
timestamp <- function() format(Sys.time(), "%Y-%m-%d %H:%M:%S")
log_msg <- function(msg) cat(sprintf("[%s] %s\n", timestamp(), msg))
log_msg("🚀 Starter national_share_update job...")
# --- Pandoc-sti ---
Sys.setenv(RSTUDIO_PANDOC = "/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64")
# --- BigQuery autentisering ---
tryCatch({
bq_auth(path = "~/.gcp/oystein-service-account_2.json")
log_msg("✅ Autentisering OK.")
}, error = function(e) {
log_msg(paste("❌ Feil under autentisering:", e$message))
quit(status = 1)
})
# --- BigQuery spørring ---
project <- "imposing-yen-426717-u4"
sql <- "SELECT * FROM `imposing-yen-426717-u4.wasteson_insight.daily_national_share`"
# --- Hent data ---
tryCatch({
log_msg("📡 Henter data fra BigQuery...")
query_job <- bq_project_query(project, sql)
df <- bq_table_download(query_job)
log_msg(paste("✅ Hentet", nrow(df), "rader."))
}, error = function(e) {
log_msg(paste("❌ Feil under henting av data:", e$message))
quit(status = 1)
})
# --- Lagre CSV ---
csv_path <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse/national_model_data.csv"
tryCatch({
write.csv(df, csv_path, row.names = FALSE)
log_msg(paste("✅ Lagret data til", csv_path))
}, error = function(e) {
log_msg(paste("❌ Feil under lagring av CSV:", e$message))
quit(status = 1)
})
# --- Render dashboard (hvis klart) ---
dashboard_path <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse/national_origin_dashboard.Rmd"
output_dir <- "/Users/oystein/Desktop/wasteson/TrackSights/datating/looker/bigquery_4 auto nasjonalitet analyse"
rmarkdown::render(
input = dashboard_path,
output_file = "index.html",
output_dir = output_dir
)
if (file.exists(dashboard_path)) {
tryCatch({
log_msg("🖼 Kjører rmarkdown::render for national dashboard...")
rmarkdown::render(
input = dashboard_path,
output_file = "index.html",
output_dir = output_dir
)
log_msg("✅ Dashboard generert OK.")
}, error = function(e) {
log_msg(paste("❌ Feil under rendering:", e$message))
})
} else {
log_msg("⚠️ Dashboardfil ikke funnet – hopper over rendering.")
}
log_msg("🎉 Jobb fullført uten feil!")
